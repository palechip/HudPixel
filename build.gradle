// For those who want the bleeding edge
buildscript {
    ext.kotlin_version = '1.0.2'
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.1-SNAPSHOT'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}
apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'kotlin'
/*
// for people who want stable - not yet functional for MC 1.8.8 - we require the forgegradle 2.1 snapshot
plugins {
    id "net.minecraftforge.gradle.forge" version "2.0.2"
}
*/

version = "3.2.5"
group = "" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "HudPixelReloaded-1.8.9-v3"

minecraft {
    version = "1.8.9-11.15.1.1902-1.8.9"
    runDir = "run"

    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not allways work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    mappings = "stable_20"
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
}

configurations {

    required
    compile.extendsFrom(required)
}
dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    required "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
}
apply plugin: 'java'
sourceCompatibility = targetCompatibility = '1.8'
compileJava {
    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
}


jar {
    // We need to make sure we package kotlin runtimes.

    dependsOn configurations.compile
    from {
        configurations.required.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
}

sourceSets { main.java.srcDirs += 'src/main/kotlin' }


processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}
